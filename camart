#!/usr/bin/env python2
'''
Preprocessing for images to lines.

This takes images from the camera, and applies transformations:
colorspace conversion, blur, Canny edge detection

Then contours are found to turn it into vectors.

(Unfortunately, OpenCV isn't setup with Python3 on Ubuntu 14.04...
i'll update this asap.)

---
    Leonerdo: Interactive art drawing robot
    Copyright (C) 2016  Matthew Bells

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import cv2
import numpy as np
import os.path
import sys

# relative module
import video

import contour_util
import contouropt
import gcoder
import opti

apply_mask = False


def save(image, contours, contours_opti):
    height, width = image.shape[:2]
    filename, filenum = unique_filename('images/camart-{:04d}.ngc')

    cv2.imwrite('images/camart-{:04d}.jpg'.format(filenum), image)
    contour_util.write_contours('images/camart-{:04d}.contour'.format(filenum), contours)
    contour_util.write_contours('images/camart-{:04d}.opti.contour'.format(filenum), contours)

    contouropt.write_gcode('images/camart-{:04d}'.format(filenum), width, height, contours)


def unique_filename(filename_pat):
    for i in range(0, 9999):
        fname = filename_pat.format(i)
        if not os.path.isfile(fname):
            return fname, i
    raise Exception("Can't find unique name.")


def main():
    global apply_mask
    print(__doc__)
    mainWindow = 'Leonerdo'

    try:
        fn = sys.argv[1]
    except:
        fn = 0

    def nothing(*arg):
        pass

    cv2.namedWindow(mainWindow)
    cv2.createTrackbar('thrs1', mainWindow, 500, 5000, nothing)
    cv2.createTrackbar('thrs2', mainWindow, 500, 5000, nothing)

    cap = video.create_capture(fn)
    width = cap.get(3)
    height = cap.get(4)
    fgbg = cv2.createBackgroundSubtractorMOG2()
    while True:
        thrs1 = cv2.getTrackbarPos('thrs1', mainWindow)
        thrs2 = cv2.getTrackbarPos('thrs2', mainWindow)

        flag, img_orig = cap.read()
        img = img_orig
        if apply_mask:
            # http://docs.opencv.org/master/d1/dc5/tutorial_background_subtraction.html#gsc.tab=0
            # http://docs.opencv.org/3.1.0/db/d5c/tutorial_py_bg_subtraction.html#gsc.tab=0
            fgmask = fgbg.apply(img)
            img = cv2.bitwise_and(img, img, mask = fgmask)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        # http://docs.opencv.org/3.1.0/d4/d13/tutorial_py_filtering.html#gsc.tab=0
        gray = cv2.blur(gray,(5,5))
        # http://docs.opencv.org/master/d7/d4d/tutorial_py_thresholding.html#gsc.tab=0
        ret,gray = cv2.threshold(gray,200,255,cv2.THRESH_TRUNC)
        ret,gray = cv2.threshold(gray,55,255,cv2.THRESH_TOZERO)

        # http://docs.opencv.org/3.1.0/da/d22/tutorial_py_canny.html#gsc.tab=0
        edge = cv2.Canny(gray, thrs1, thrs2, apertureSize=5)

        # http://docs.opencv.org/master/d4/d73/tutorial_py_contours_begin.html#gsc.tab=0    
        im2, contours, hierarchy = cv2.findContours(edge,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
        vis_e = img.copy()

        contours = opti.filter_small_contours(contours)
        # http://opencvpython.blogspot.ca/2012/06/contours-2-brotherhood.html
        #cnt=contours[0]
        #approx = cv2.approxPolyDP(cnt,0.1*cv2.arcLength(cnt,True),True)
    
        cv2.drawContours(vis_e, contours, -1, (0,255,0), 2)
        #vis_e = np.uint8(vis_e/2.)
        #vis_e[edge != 0] = (0, 255, 0)
        #vis_e[edge == 0] = (0, 0, 0)
        cv2.imshow(mainWindow, vis_e)
        if apply_mask:
            cv2.imshow('background mask',fgmask)

        ch = cv2.waitKey(5) & 0xFF
        if ch == 32:
            contours_opti = opti.tsp(contours)
            moves_opti = contour_util.moves(contours_opti)
            save(img_orig, contours, contours_opti)

            img_saved = img.copy()
            cv2.drawContours(img_saved, moves_opti, -1, (0,0,255), 1)
            cv2.drawContours(img_saved, contours_opti, -1, (0,255,0), 2)
            cv2.imshow('saved', img_saved)


        if ch == 0x70: # p
            print('---------------')
            print('type(contours)', type(contours))
            print('type(contours[0])', type(contours[0]))
            print('type(contours[0][0])', type(contours[0][0]))

            print('contours[0].shape', contours[0].shape)
            print('contours[0][0].shape', contours[0][0].shape)

            print('contours[0].dtype', contours[0].dtype)
            #print('dir(contours[0])', dir(contours[0]))

            print('contours[0].dumps()', contours[0].dumps())

        if ch == 27: # Esc
            break
        if ch == 0x62: # b
            apply_mask = not apply_mask
            print("Mask=", apply_mask)

    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
